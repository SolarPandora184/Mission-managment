<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Mission Management</title>
<style>
  body { font-family: Arial, sans-serif; margin: 1rem; position: relative; }
  section { margin-bottom: 2rem; }
  h2 { border-bottom: 1px solid #ccc; }

  /* Mission section styles */
  #missions {
    position: relative;
  }

  #missionSearch {
    margin-bottom: 0.5rem;
    width: 100%;
    padding: 0.4rem 0.6rem;
    font-size: 1rem;
    box-sizing: border-box;
  }

  #missionList {
    border: 1px solid #ccc;
    max-height: 200px;
    overflow-y: auto;
    padding: 0.5rem;
  }
  #missionList button {
    display: block;
    width: 100%;
    text-align: left;
    margin: 0.25rem 0;
    padding: 0.5rem;
    border: none;
    background: #f0f0f0;
    cursor: pointer;
    font-size: 1rem;
  }
  #missionList button:hover {
    background: #ddd;
  }

  /* Create mission button top-right */
  #createMissionBtn {
    position: absolute;
    top: 0;
    right: 0;
    padding: 0.5rem 1rem;
    font-size: 1rem;
    cursor: pointer;
  }

  /* Modal overlay and box */
  #modalOverlay {
    display: none; /* Hidden by default */
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.5);
    z-index: 1000;

    display: flex;
    justify-content: center;
    align-items: center;
  }
  #modalBox {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    width: 300px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
  }
  #modalBox h3 {
    margin-top: 0;
  }
  #modalBox input[type="text"] {
    width: 100%;
    padding: 0.4rem 0.6rem;
    font-size: 1rem;
    margin: 0.5rem 0 1rem 0;
    box-sizing: border-box;
  }
  #modalBox button {
    padding: 0.5rem 1rem;
    font-size: 1rem;
    margin-right: 0.5rem;
    cursor: pointer;
  }

</style>
</head>
<body>

<h1>Mission Management (Rough)</h1>

<section id="missions">
  <h2>Missions</h2>
  <input type="text" id="missionSearch" placeholder="Search missions..." />
  <div id="missionList"></div>
  <button id="createMissionBtn">Create Mission</button>
</section>

<section id="chat">
  <h2>Chat</h2>
  <p>Mission: <span id="currentMissionName">None</span></p>
  <div id="chatMessages"></div>
  <input type="text" id="chatInput" placeholder="Type a message" />
  <button id="sendChatBtn">Send</button>
</section>

<section id="comms">
  <h2>Comms Log</h2>
  <p>Mission: <span id="currentMissionName2">None</span></p>
  <div id="commsLog"></div>
  <input type="text" id="commsInput" placeholder="Log entry" />
  <button id="logCommsBtn">Log</button>
</section>

<section id="files">
  <h2>Files</h2>
  <p>Mission: <span id="currentMissionName3">None</span></p>
  <input type="file" id="fileUpload" />
  <button id="uploadFileBtn">Upload</button>
  <ul id="fileList"></ul>
</section>

<!-- Modal for creating mission -->
<div id="modalOverlay">
  <div id="modalBox">
    <h3>Create New Mission</h3>
    <input type="text" id="modalMissionName" placeholder="Mission name" />
    <div>
      <button id="modalCreateBtn">Create</button>
      <button id="modalCancelBtn">Cancel</button>
    </div>
  </div>
</div>

<script>
  const missions = [];
  let currentMission = null;

  const missionListEl = document.getElementById('missionList');
  const missionSearchEl = document.getElementById('missionSearch');
  const currentMissionNameEls = [
    document.getElementById('currentMissionName'),
    document.getElementById('currentMissionName2'),
    document.getElementById('currentMissionName3')
  ];
  const chatMessagesEl = document.getElementById('chatMessages');
  const commsLogEl = document.getElementById('commsLog');
  const fileListEl = document.getElementById('fileList');

  // Modal Elements
  const modalOverlay = document.getElementById('modalOverlay');
  const modalMissionNameInput = document.getElementById('modalMissionName');
  const modalCreateBtn = document.getElementById('modalCreateBtn');
  const modalCancelBtn = document.getElementById('modalCancelBtn');
  const createMissionBtn = document.getElementById('createMissionBtn');

  function updateMissionDisplays() {
    const name = currentMission ? currentMission.name : 'None';
    currentMissionNameEls.forEach(el => el.textContent = name);
  }

  function refreshMissionList() {
    const filter = missionSearchEl.value.trim().toLowerCase();
    missionListEl.innerHTML = '';
    missions
      .filter(m => m.name.toLowerCase().includes(filter))
      .forEach(m => {
        const btn = document.createElement('button');
        btn.textContent = m.name;
        btn.onclick = () => {
          currentMission = m;
          updateMissionDisplays();
          renderChat();
          renderComms();
          renderFiles();
          closeModal();
        };
        missionListEl.appendChild(btn);
      });

    if (missionListEl.innerHTML === '') {
      missionListEl.textContent = 'No missions found';
    }
  }

  function renderChat() {
    if (!currentMission) {
      chatMessagesEl.textContent = 'Select a mission';
      return;
    }
    chatMessagesEl.innerHTML = '';
    currentMission.chat.forEach(msg => {
      const div = document.createElement('div');
      div.textContent = msg;
      chatMessagesEl.appendChild(div);
    });
  }

  function renderComms() {
    if (!currentMission) {
      commsLogEl.textContent = 'Select a mission';
      return;
    }
    commsLogEl.innerHTML = '';
    currentMission.comms.forEach(log => {
      const div = document.createElement('div');
      div.textContent = log;
      commsLogEl.appendChild(div);
    });
  }

  function renderFiles() {
    if (!currentMission) {
      fileListEl.innerHTML = '<li>Select a mission</li>';
      return;
    }
    fileListEl.innerHTML = '';
    currentMission.files.forEach(f => {
      const li = document.createElement('li');
      li.textContent = f.name;
      fileListEl.appendChild(li);
    });
  }

  // Modal open/close
  function openModal() {
    modalOverlay.style.display = 'flex';
    modalMissionNameInput.value = '';
    modalMissionNameInput.focus();
  }
  function closeModal() {
    modalOverlay.style.display = 'none';
  }

  // Create mission via modal
  function createMissionFromModal() {
    const name = modalMissionNameInput.value.trim();
    if (!name) {
      alert('Please enter a mission name');
      modalMissionNameInput.focus();
      return;
    }
    // Check if mission already exists (optional)
    if (missions.some(m => m.name.toLowerCase() === name.toLowerCase())) {
      alert('Mission with this name already exists');
      modalMissionNameInput.focus();
      return;
    }
    const newMission = { name, chat: [], comms: [], files: [] };
    missions.push(newMission);
    currentMission = newMission;
    updateMissionDisplays();
    refreshMissionList();
    renderChat();
    renderComms();
    renderFiles();
    closeModal();
  }

  createMissionBtn.onclick = openModal;
  modalCancelBtn.onclick = closeModal;
  modalCreateBtn.onclick = createMissionFromModal;

  // Also allow pressing Enter key in modal input to submit form
  modalMissionNameInput.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      createMissionFromModal();
    }
  });

  document.getElementById('sendChatBtn').onclick = () => {
    const input = document.getElementById('chatInput');
    if (!currentMission) return alert('Select a mission first');
    const msg = input.value.trim();
    if (!msg) return;
    currentMission.chat.push(msg);
    input.value = '';
    renderChat();
  };

  document.getElementById('logCommsBtn').onclick = () => {
    const input = document.getElementById('commsInput');
    if (!currentMission) return alert('Select a mission first');
    const log = input.value.trim();
    if (!log) return;
    currentMission.comms.push(log);
    input.value = '';
    renderComms();
  };

  document.getElementById('uploadFileBtn').onclick = () => {
    if (!currentMission) return alert('Select a mission first');
    const fileInput = document.getElementById('fileUpload');
    if (!fileInput.files.length) return alert('Select a file to upload');
    currentMission.files.push({ name: fileInput.files[0].name });
    fileInput.value = '';
    renderFiles();
  };

  missionSearchEl.oninput = refreshMissionList;

  refreshMissionList();
  updateMissionDisplays();
</script>

</body>
</html>
